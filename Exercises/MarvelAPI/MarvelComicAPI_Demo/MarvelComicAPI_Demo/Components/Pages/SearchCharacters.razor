@page "/search-character"
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@rendermode InteractiveServer

<h1>Search Marvel Character</h1>

<div>
    <input @bind="searchQuery" @bind:event="oninput" placeholder="Enter character name" />
    <button @onclick="SearchCharacter">Search</button>
</div>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (character != null)
{
    <div>
        <h2>@character.name</h2>
        <p><strong>Description:</strong> @character.description</p>
        <img src="@($"{character.thumbnail.path}.{character.thumbnail.extension}")" alt="@character.name" />

        <h3>Comics (@character.comics.available)</h3>
        <ul>
            @foreach (var comic in character.comics.items.Take(10)) 
            {
                <li>@comic.name</li>
            }
        </ul>

        <h3>Series (@character.series.available)</h3>
        <ul>
            @foreach (var series in character.series.items.Take(10)) 
            {
                <li>@series.name</li>
            }
        </ul>

        <h3>Stories (@character.stories.available)</h3>
        <ul>
            @foreach (var story in character.stories.items.Take(10)) 
            {
                <li>@story.name</li>
            }
        </ul>

        <h3>Events (@character.events.available)</h3>
        <ul>
            @foreach (var eventItem in character.events.items.Take(10)) 
            {
                <li>@eventItem.name</li>
            }
        </ul>
    </div>
}
else if (searchPerformed)
{
    <p>No character found for "@searchQuery". Please try again.</p>
}

@code {
    private string searchQuery = string.Empty;
    private Character? character;
    private bool isLoading = false;
    private bool searchPerformed = false;

    private string CreateHash(string timestamp, string privateKey, string publicKey)
    {
        using (var md5 = System.Security.Cryptography.MD5.Create())
        {
            var inputBytes = System.Text.Encoding.ASCII.GetBytes($"{timestamp}{privateKey}{publicKey}");
            var hashBytes = md5.ComputeHash(inputBytes);
            return string.Concat(hashBytes.Select(b => b.ToString("x2")));
        }
    }

    private async Task SearchCharacter()
    {
        var timestamp = DateTime.UtcNow.Ticks.ToString();
        var privateKey = "d912e3fd0c6ea7cc4b1fc27ca4cac45c441ae3a0"; // Replace with your private key
        var publicKey = "c5ec9a8e44fc7d2ec3b3651d89304030"; // Replace with your public key
        var hash = CreateHash(timestamp, privateKey, publicKey);

        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            searchPerformed = true;
            character = null;
            return;
        }

        isLoading = true;
        searchPerformed = true;
        try
        {
            var response = await Http.GetFromJsonAsync<MarvelResponse>(
                $"https://gateway.marvel.com:443/v1/public/characters?name={searchQuery}&ts={timestamp}&apikey={publicKey}&hash={hash}");

            if (response?.data?.results?.Any() == true)
            {
                character = response.data.results.First();
            }
            else
            {
                character = null;
            }
        }
        catch (JsonException jsonEx)
        {
            Console.WriteLine($"Error parsing JSON: {jsonEx.Message}");
            character = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching character data: {ex.Message}");
            character = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    // Models
    public class MarvelResponse
    {
        public DataWrapper data { get; set; }
    }

    public class DataWrapper
    {
        public List<Character> results { get; set; }
    }

    public class Character
    {
        public int id { get; set; }
        public string name { get; set; }
        public string description { get; set; }
        public Thumbnail thumbnail { get; set; }
        public Comics comics { get; set; }
        public Series series { get; set; }
        public Stories stories { get; set; }
        public Events events { get; set; }
    }

    public class Thumbnail
    {
        public string path { get; set; }
        public string extension { get; set; }
    }

    public class Comics
    {
        public int available { get; set; }
        public List<ComicItem> items { get; set; }
    }

    public class ComicItem
    {
        public string name { get; set; }
    }

    public class Series
    {
        public int available { get; set; }
        public List<SeriesItem> items { get; set; }
    }

    public class SeriesItem
    {
        public string name { get; set; }
    }

    public class Stories
    {
        public int available { get; set; }
        public List<StoryItem> items { get; set; }
    }

    public class StoryItem
    {
        public string name { get; set; }
    }

    public class Events
    {
        public int available { get; set; }
        public List<EventItem> items { get; set; }
    }

    public class EventItem
    {
        public string name { get; set; }
    }
}
